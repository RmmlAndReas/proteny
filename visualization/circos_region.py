import os;

class circos_region:
  region      = None;
  ud_dist     = 0;
  outdir      = "./";
  name        = "";
  karyotypes  = [];
  blast_links = [];
  text_prots  = [];
  gene_tiles  = [];
  exon_tiles  = [];

  chromosomes_units = 1;
  max_links_number  = 712173;

  def __init__(self, files, region, ud_dist, outdir, name):
    self.region      = region;
    self.ud_dist     = ud_dist;
    self.karyotypes  = files['karyotype'];
    self.blast_links = files['blast'];
    self.text_prots  = files['genes']['text'];
    self.gene_tiles  = files['genes']['data'];
    self.exon_tiles  = files['exons'];
    self.outdir      = outdir;
    self.name        = name;

    for dir in [ '%s/%s' % (self.outdir, dir) for dir in [ 'data', 'etc' ]]:
      try:
        os.makedirs(dir);
      except Exception:
        continue;
    #efor

    self.make_circos(outdir);
  #edef

  #############################################################################

  TXT_circos_conf = """
# circos conf
# Automatically generated by proteny tool
# https://github.com/thiesgehrmann/proteny

karyotype = %s

chromosomes_units           = %d
chromosomes_display_default = no
chromosomes                 = %s

#<<include etc/region_ideogram.conf>>
%s

#<<include etc/region_ticks.conf>>
%s

#<<include etc/region_links.conf>>
%s

#<<include etc/region_plots.conf>>
%s

################################################################
# The remaining content is standard and required. It is imported 
# from default files in the Circos distribution.
#
# These should be present in every Circos configuration file and
# overridden as required. To see the content of these files, 
# look in etc/ in the Circos distribution.

<image>
# Included from Circos distribution.
<<include etc/image.conf>>
</image>

# RGB/HSV color definitions, color lists, location of fonts, fill patterns.
# Included from Circos distribution.
<<include etc/colors_fonts_patterns.conf>>
<<include etc/colors.conf>>

# Debugging, I/O an dother system parameters
# Included from Circos distribution.
<<include etc/housekeeping.conf>>
"""

  TXT_ideogram_conf = """
<ideogram>

  <spacing>
    default = 0.01r
  </spacing>

  radius    = 0.90r
  thickness = 20p
  fill      = yes

  show_label       = yes
  label_font       = default
  label_radius     = dims(image,radius) - 60p
  label_size       = 30
  label_parallel   = yes

</ideogram>
"""

  TXT_gene_plot = """
  <plot>
    file = %s
    type        = tile
    r1          = 1r
    r0          = 0.92r
    orientation = out
    
    layers      = 1
    margin      = 0.02u
    thickness   = 20
    padding     = 0
    
    layers_overflow=collapse
    stroke_thickness = 1
    <rules>
      <rule>
        condition    = var(strand) eq "n"
        stroke_color = red
        color        = red
      </rule>
      <rule>
        condition    = var(strand) eq "p"
        stroke_color = blue
        color        = blue
      </rule>
    </rules>
  </plot>
"""

  TXT_exon_plot = """
  <plot>
    file = %s
    type        = tile
    r1          = 0.99r
    r0          = 0.92r
    orientation = out
    
    layers      = 1
    margin      = 0.02u
    thickness   = 12
    padding     = 0
    color       = green
  </plot>
"""

  TXT_text_plot = """
  <plot>
    file  = %s
    label_parallel = yes
    type  = text
    color = black
    r1    = 0.99r
    r0    = 0.95r
    label_snuggle = yes
    label_font    = condensed
  </plot>

"""

  TXT_links_conf = """
    radius        = 0.92r
    bezier_radius = 0r
    thickness     = 2
    ribbon        = yes
    
    <rules>
      flow = continue
      <rule>
        condition = var(evalue) > 0.00001
        show      = no
      </rule>
      <rule>
        condition = 1
        color     = eval(sprintf("hsv(%d,%f,%f)", var(h), var(s), var(v) ))
        #flat     = yes
      </rule>
    </rules>
"""

  TXT_ticks_conf = """
show_ticks          = yes
show_tick_labels    = yes

<ticks>
  radius           = 1r
  color            = black
  thickness        = 2p
  multiplier       = 1
  format           = %d

  <tick>
    spacing        = 1000u
    size           = 10p
  </tick>

  <tick>
    spacing        = 10000u
    size           = 15p
    show_label     = yes
    label_size     = 20p
    label_offset   = 10p
    format         = %d
  </tick>

</ticks>
"""

  #############################################################################

  def make_circos(self, outdir):
    i_d = self.make_ideogram(outdir);
    l_d = self.make_links(outdir);
    p_d = self.make_plots(outdir);
    t_d = self.make_ticks(outdir);
    self.make_conf(outdir, i_d, l_d, p_d, t_d);
  #edef

  #############################################################################

  def make_region(self):
    # ('bri1',   [ ('schco2', 'scaffold_1', 5346259, 5348750), ('agabi', 'scaffold_1', 1865954, 1869064) ] )
    R = [];
    for r in self.region[1]:
      R.append("%s_%s:%d-%d" % (r[0], str(r[1]), r[2]-self.ud_dist, r[3]+self.ud_dist));
    #efor

    return ';'.join(R);
  #edef

  #############################################################################

  def make_conf(self, outdir, i_d, l_d, p_d, t_d):
    filename = '%s/%s.conf' % (self.outdir, self.name);
    fd = open(filename, 'w');
    fd.write(self.TXT_circos_conf % (','.join(self.karyotypes), self.chromosomes_units, self.make_region(), i_d, l_d, p_d, t_d));
    fd.close();
  #edef

  #############################################################################

  def make_ideogram(self, outdir):
    return self.TXT_ideogram_conf;
  #edef

  #############################################################################

  def make_links(self, outdir):
    data = "";

    data += '<links>\n';
    data += 'max_number = %d\n' % self.max_links_number;
    for bl in self.blast_links:
      data += '  <link>\n';
      data += '    file          = %s\n' % bl;
      data += self.TXT_links_conf;
      data += '  </link>\n';
    #efor
    data += '</links>\n';

    return data;
  #edef

  #############################################################################

  def make_plots(self, outdir):
    data = "";
    data += '<plots>\n';

    for gene in self.gene_tiles:
      data += self.TXT_gene_plot % gene;
    #efor

    for exon in self.exon_tiles:
      data += self.TXT_exon_plot % exon;
    #efor

    for text in self.text_prots:
      data += self.TXT_text_plot % text;
    #efor

    data += '</plots>\n';

    return data;
  #edef

  #############################################################################

  def make_ticks(self, outdir):
    return  self.TXT_ticks_conf;
  #edef

  #############################################################################

#eclass

