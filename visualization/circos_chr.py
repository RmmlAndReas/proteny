import os;

class circos_chrom:
  region      = None;
  ud_dist     = 0;
  outdir      = "./";
  name        = "";
  karyotypes  = [];
  clust_links = [];
  text_prots  = [];
  gene_tiles  = [];
  exon_tiles  = [];

  chromosomes_units = 1;
  max_links_number  = 712173;

  def __init__(self, files, region, ud_dist, outdir, name):
    self.region      = region;
    self.ud_dist     = ud_dist;
    self.karyotypes  = files['karyotype'];
    self.clust_links = files['clusts'];
    self.text_prots  = files['genes']['text'];
    self.gene_tiles  = files['genes']['data'];
    self.exon_tiles  = files['exons'];
    self.outdir      = outdir;
    self.name        = name;

    for dir in [ '%s/%s' % (self.outdir, dir) for dir in [ 'data', 'etc' ]]:
      try:
        os.makedirs(dir);
      except Exception:
        continue;
    #efor

    self.make_circos(outdir);
  #edef

  #############################################################################

  TXT_circos_conf = """
# circos conf
# Automatically generated by proteny tool
# https://github.com/thiesgehrmann/proteny

karyotype = %s

chromosomes_units           = %d
chromosomes_display_default = no
chromosomes                 = %s

<<include etc/chr_ideogram.conf>>
<<include etc/chr_links.conf>>
<<include etc/chr_plots.conf>>

################################################################
# The remaining content is standard and required. It is imported 
# from default files in the Circos distribution.
#
# These should be present in every Circos configuration file and
# overridden as required. To see the content of these files, 
# look in etc/ in the Circos distribution.

<image>
# Included from Circos distribution.
<<include etc/image.conf>>
</image>

# RGB/HSV color definitions, color lists, location of fonts, fill patterns.
# Included from Circos distribution.
<<include etc/colors_fonts_patterns.conf>>
<<include etc/colors.conf>>

# Debugging, I/O an dother system parameters
# Included from Circos distribution.
<<include etc/housekeeping.conf>>
"""

  TXT_ideogram_conf = """
<ideogram>

  <spacing>
    default = 0.01r
  </spacing>

  radius    = 0.90r
  thickness = 20p
  fill      = yes

  show_label       = yes
  label_font       = default
  label_radius     = dims(image,radius) - 60p
  label_size       = 30
  label_parallel   = yes

</ideogram>
"""

  TXT_gene_plot = """
  <plot>
    file = %s
    type        = tile
    r1          = 1r
    r0          = 0.92r
    orientation = out
    
    layers      = 1
    margin      = 0.02u
    thickness   = 20
    padding     = 0
    
    layers_overflow=collapse
    stroke_thickness = 1
    <rules>
      <rule>
        condition    = var(strand) eq "n"
        stroke_color = red
        color        = red
      </rule>
      <rule>
        condition    = var(strand) eq "p"
        stroke_color = blue
        color        = blue
      </rule>
    </rules>
  </plot>
"""

  TXT_links_conf = """
    radius        = 0.92r
    bezier_radius = 0r
    thickness     = 2
    ribbon        = yes
    
    <rules>
      flow = continue
      <rule>
        condition = var(score) < 3 || var(nhits) < 20
        show      = no
      </rule>
      <rule>
        condition = 1
        color     = eval(sprintf("hsv(%d,%f,%f)", (var(b_chrid) * 10), ( (10,var(score))[var(score) < 10] / 10.0  ), 1.0 ))
        #flat      = yes
      </rule>
    </rules>
"""

  #############################################################################

  def make_circos(self, outdir):
    self.make_conf(outdir);
    self.make_ideogram(outdir);
    self.make_links(outdir);
    self.make_plots(outdir);
  #edef

  #############################################################################

  def make_region(self):
    # ('bri1',   [ ('schco2', 255701,  'scaffold_1',  5346259, 5348750, '-'), ('agabi', 189729, 'scaffold_1',  1865954, 1869064, '+') ] )
    R = [];
    for r in self.region[1]:
      R.append("%s_%s:%d-%d" % (r[0], str(r[2]), r[3]-self.ud_dist, r[4]+self.ud_dist));
    #efor

    return ';'.join(R);
  #edef

  #############################################################################

  def make_conf(self, outdir):
    filename = '%s/%s.conf' % (self.outdir, self.name);
    fd = open(filename, 'w');
    fd.write(self.TXT_circos_conf % (','.join(self.karyotypes), self.chromosomes_units, self.make_region()));
    fd.close();
  #edef

  #############################################################################

  def make_ideogram(self, outdir):
    filename = '%s/etc/chr_ideogram.conf' % outdir;
    fd = open(filename, 'w');
    fd.write(self.TXT_ideogram_conf);
    fd.close();
  #edef

  #############################################################################

  def make_links(self, outdir):
    filename = '%s/etc/chr_links.conf' % outdir;
    fd = open(filename, 'w');
    fd.write('<links>\n');
    fd.write('max_number = %d\n' % self.max_links_number);
    for bl in self.blast_links:
      fd.write('  <link>\n');
      fd.write('    file          = %s\n' % bl);
      fd.write(self.TXT_links_conf);
      fd.write('  </link>\n');
    #efor
    fd.write('</links>\n');
    fd.close();
  #edef

  #############################################################################

  def make_plots(self, outdir):
    filename = '%s/etc/chr_plots.conf' % outdir;
    fd = open(filename, 'w');
    fd.write('<plots>\n');

    for gene in self.gene_tiles:
      fd.write(self.TXT_gene_plot % gene);
    #efor

    fd.write('</plots>\n');
    fd.close();
  #edef

  #############################################################################

#eclass

